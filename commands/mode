import fs from "fs";
import config from "../config.js";
import { isOwner } from "../utils/isOwner.js";
import { getMode } from "../utils/getMode.js";

export default {
  name: "mode",
  description: "Switch bot mode between public and private (Owner only)",
  async execute(sock, msg, args) {
    const from = msg.key.remoteJid;
    const sender = msg.key.participant || msg.key.remoteJid;
    const botName = "NexOra";

    // ✅ Owner check
    if (!isOwner(sender)) {
      return sock.sendMessage(
        from,
        { text: "❌ Only owner can change mode!" },
        { quoted: msg }
      );
    }

    // ✅ Show current mode if no argument
    if (!args[0]) {
      const currentMode = getMode();
      return sock.sendMessage(
        from,
        {
          text: `
┏━━⚙️ *${botName.toUpperCase()} MODE* ━━┓
🔹 Current Mode: *${currentMode.toUpperCase()}*

Use:
• .mode public
• .mode private
┗━━━━━━━━━━━━━━━━━━┛
          `.trim(),
        },
        { quoted: msg }
      );
    }

    const mode = args[0].toLowerCase();

    // ✅ Validate argument
    if (!["public", "private"].includes(mode)) {
      return sock.sendMessage(
        from,
        {
          text: `
⚙️ *Usage:*
• .mode public
• .mode private
          `.trim(),
        },
        { quoted: msg }
      );
    }

    // ✅ Save new mode to config.js
    config.mode = mode;
    fs.writeFileSync("./config.js", `export default ${JSON.stringify(config, null, 2)};\n`);

    // ✅ Confirmation message
    await sock.sendMessage(
      from,
      {
        text: `
┏━━🤖 *${botName.toUpperCase()} BOT* ━━┓
✅ Mode changed successfully!
🔹 New Mode: *${mode.toUpperCase()}*
┗━━━━━━━━━━━━━━━━━━━━━━┛
        `.trim(),
      },
      { quoted: msg }
    );
  },
};
